---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro'
import Comments from '~/components/Comments.astro'
import Pagination from '~/components/Pagination.astro'
import SiteSeo from '~/components/SiteSeo.astro'
import LayoutDefault from '~/layouts/LayoutDefault.astro'
import LayoutPost from '~/layouts/LayoutPost.astro'
import { getPosts } from '~/utils'

export const getStaticPaths = (async () => {
  try {
    const posts = await getPosts()
    // 确保有 timeline 标记的文章
    const timelinePosts = posts.filter(post => {
      return post?.data?.timeline === true &&
             post?.data?.pubDate instanceof Date &&
             post?.data?.title
    })
    
    if (!timelinePosts.length) {
      // 如果没有符合条件的文章，返回空数组
      return []
    }

    // 按发布日期排序
    timelinePosts.sort((a, b) => {
      return b.data.pubDate.getTime() - a.data.pubDate.getTime()
    })
    
    return timelinePosts.map((post, idx) => {
      const prev = timelinePosts[idx - 1]
      const next = timelinePosts[idx + 1]
      return {
        params: { slug: post.slug },
        props: { entry: post, next, prev },
      }
    })
  } catch (error) {
    console.error('Error in getStaticPaths:', error)
    return []
  }
}) satisfies GetStaticPaths

type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { entry, prev, next } = Astro.props

// 确保 entry 存在且可以渲染
if (!entry) {
  return new Response('Not Found', { status: 404 })
}

const { Content } = await entry.render()
const { translate: t } = Astro.locals

function getUrl(slug: string | undefined) {
  if (!slug) return '#'
  return `/timeline/${slug}`
}

function formatDate(date: Date) {
  try {
    return date.toLocaleDateString('zh-CN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  } catch (error) {
    return ''
  }
}

// 安全地获取日期
const pubDate = entry.data.pubDate instanceof Date 
  ? entry.data.pubDate 
  : new Date(entry.data.pubDate)
---

<LayoutDefault>
  <SiteSeo 
    slot="seo" 
    title={`${entry.data.title || 'Timeline'}`}
    desc={entry.data.description || ''}
    banner={entry.data.banner}
  />

  <div class="timeline-container">
    <div class="timeline-header">
      <h1>{entry.data.title}</h1>
      {pubDate && (
        <time datetime={pubDate.toISOString()}>
          {formatDate(pubDate)}
        </time>
      )}
    </div>

    <LayoutPost post={entry}>
      <Content />
    </LayoutPost>

    {(prev || next) && (
      <Pagination
        showLeft={Boolean(prev)}
        leftTitle={prev ? `${t('prev_post')}: ${prev.data.title}` : ''}
        leftUrl={getUrl(prev?.slug)}
        showRight={Boolean(next)}
        rightTitle={next ? `${t('next_post')}: ${next.data.title}` : ''}
        rightUrl={getUrl(next?.slug)}
        showPageCount={false}
      />
    )}
  </div>

  <Comments post={entry} />
</LayoutDefault>

<script>
  import '@github/clipboard-copy-element'

  document.addEventListener('clipboard-copy', (event) => {
    const target = event.target as HTMLElement
    const icon = target.querySelector('.icon') as HTMLElement
    if (icon) {
      icon.classList.replace('i-mdi-content-copy', 'i-mdi-check')
      setTimeout(() => {
        icon.classList.replace('i-mdi-check', 'i-mdi-content-copy')
      }, 1500)
    }
  })

  const codeBlocks = Array.from(document.querySelectorAll('pre'))
  const icon = "<div class='i-mdi-content-copy icon text-white'></div>"
  
  for (const codeBlock of codeBlocks) {
    try {
      const wrapper = document.createElement('div')
      wrapper.className = 'code-container'

      const copyButton = document.createElement('clipboard-copy')
      const code = codeBlock.querySelector('code')
      copyButton.value = code?.textContent ?? ''
      copyButton.className = 'clipboard-copy'
      copyButton.innerHTML = icon

      codeBlock.appendChild(copyButton)

      if (codeBlock.parentNode) {
        codeBlock.parentNode.insertBefore(wrapper, codeBlock)
        wrapper.appendChild(codeBlock)
      }
    } catch (error) {
      console.error('Error processing code block:', error)
    }
  }
</script>

<style is:global>
  .timeline-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .timeline-header {
    margin-bottom: 2rem;
    text-align: center;
  }

  .timeline-header h1 {
    font-size: 2rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
  }

  .timeline-header time {
    color: #666;
    font-size: 0.9rem;
  }

  .code-container {
    position: relative;
  }
  
  .clipboard-copy {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    width: 1.75rem;
    height: 1.75rem;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 0.25rem;
  }

  .clipboard-copy:hover {
    background-color: #30363d;
  }
</style>